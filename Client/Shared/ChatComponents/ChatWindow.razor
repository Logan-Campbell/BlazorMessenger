@using Microsoft.AspNetCore.SignalR.Client
@using LANMessenger.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@implements IAsyncDisposable

<div>
    @foreach (var message in messages)
    {
        <MessageCard data=message></MessageCard>
    }
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

@code {
    [Parameter]
    public int recieverId { get; set; }
    [Parameter]
    public UserDTO user { get; set; }
    private HubConnection? hubConnection;
    private List<UserMessageDTO> messages = new List<UserMessageDTO>();
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        IEnumerable<UserMessageDTO> userMessages = await Http.GetFromJsonAsync<IEnumerable<UserMessageDTO>>($"api/UserMessages?recieverId={recieverId}");
        messages.AddRange(userMessages);
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<UserMessageDTO>("ReceiveMessage", (userMessage) =>
        {
            var encodedMsg = userMessage;
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            MessageDTO message = new MessageDTO
                {
                    SenderId = user.Id,
                    RecieverId = recieverId,
                    message = messageInput,
                    Date = DateTimeOffset.Now,
                    sender_ip = "10.0.0.15",
                    sender_device = "Windows"
                };

            HttpResponseMessage response = await Http.PostAsJsonAsync<MessageDTO>("api/Messages", message);
            if(response.IsSuccessStatusCode)
            {
                await hubConnection.SendAsync("SendMessage", user, message);
            }
            else
            {
                //Display error message/model
            }
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
